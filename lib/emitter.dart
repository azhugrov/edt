// Copyright (c) 2012, the EDT project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

/** Emittes a dart code for a compiled template. */
interface TemplateEmitter default TemplateEmitterImpl {
  
  TemplateEmitter();
  
  /** Emits start of class template with given name */
  String emitStartClass(String className);
  
  String emitTextFragment(TextNode textNode);
  
  String emitCodeFragment(CodeNode codeNode);
  
  String emitEscapedOutputFragment(EscapedOutputNode outputNode);
  
  String emitUnescapedOutputFragment(UnescapedOutputNode outputNode);
  
  /** Emits end of class template */
  String emitEndClass();
  
}

/** Standart implementation of emitter */
class TemplateEmitterImpl implements TemplateEmitter {
  
  TemplateEmitterImpl() {}
  
  /** Emits start of class template with given name */
  String emitStartClass(String className) {
    return "//This file was generated by the EDT compiler. Do not edit it.\n"
           "class $className extends EDTemplate {\n"
           "  String render(Map data, OutputStream out) {\n";  
  }
  
  String emitTextFragment(TextNode fragment) {
    var text = fragment.text.replaceAll("\n", "\\n")
                            .replaceAll("\r", "\\r")
                            .replaceAll("\"", "\\\"");
    return "    out.writeString(\"${text}\");\n";      
  }
  
  String emitCodeFragment(CodeNode fragment) {
    return "${fragment.code}\n";
  }
  
  String emitEscapedOutputFragment(EscapedOutputNode fragment) {
    return "    out.writeString(escapeHtml(${fragment.expression}));\n";
  }
  
  String emitUnescapedOutputFragment(UnescapedOutputNode fragment) {
    return "    out.writeString(${fragment.expression});\n";
  }
  
  /** Emits end of class template */
  String emitEndClass() {
    return "  }\n"
           "}\n";
  }
  
}